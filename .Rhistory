myfun <- function(arg1, arg2=1) {
print("Hello, world!")
}
library(myRFMpackage)
library(data.table)
library(lubridate)
library(myRFMpackage)
transactions <- fread("transactions.csv")
setwd("C:/Users/dario/Dropbox/Uni ZH/Master/FS22/R")
transactions <- fread("transactions.csv")
str(transactions)
transactions[,TransDate:=dmy(TransDate, tz="UTC")]
calculateRFM <- function(data, weight_recency=1, weight_frequency=1, weight_monetary=1){
# adjusting values to ensure that the weights add up to one
weight_recency2 <- weight_recency/sum(weight_recency, weight_frequency, weight_monetary)
weight_frequency2 <- weight_frequency/sum(weight_recency, weight_frequency, weight_monetary)
weight_monetary2 <- weight_monetary/sum(weight_recency, weight_frequency, weight_monetary)
print("weights are calculated")
# RFM measures
max.Date <- max(data[,TransDate])
temp <- data[,list(
recency = as.numeric(max.Date - max(TransDate)),
frequency = .N,
monetary = mean(PurchAmount)),
by=Customer
]
print("RFM Measure done")
# RFM scores
temp <- temp[,list(Customer,
recency = as.numeric(cut2(-recency, g=3)),
frequency = as.numeric(cut2(frequency, g=3)),
monetary = as.numeric(cut2(monetary, g=3)))]
# Overall RFM score
temp[,finalscore:=weight_recency2*recency+weight_frequency2*frequency+weight_monetary2*monetary]
print("Overall RFM Measure done")
# RFM group
temp[,group:=round(finalscore)]
# Return final table
return(temp)
}
calculateRFM(20,20,60)
calculateRFM(transactions,20,20,60)
temp <- calculateRFM(transactions,20,20,60)
temp
View(temp)
library(myRFMpackage)
library(myRFMpackage)
library(myRFMpackage)
library(myRFMpackage)
library(myRFMpackage)
addFirstTWo <- function(c(x, y))
result <- C(x + y)
return(result)
}
addFirstTWo <- function(c(x, y)){}
result <- C(x + y)
return(result)
}
addFirstTWo <- function(c(x, y)){
result <- C(x + y)
return(result)
}
addFirstTWo <- function(c(x, y)){
result <- C(x + y)
return(result)
}
addFirstTWo <- function(c(x, y)){
result <- C(x + y)
return(result)
}
addFirstTWo <- function(c(x, y)){
result <- C(x + y)
return(result)
}
addFirstTWo <- function(c(x, y)){
result <- C(x + y)
return(result)
}
addFirstTwo <- function(c(x, y)){
result <- C(x + y)
r
addFirstTwo <- function(c(x, y)){
result <- C(x + y)
return(result)
}
addFirstTwo <- function(x, y){
result <- (x + y)
return(result)
}
addFirstTwo <- function(x){
result <- x[1] + x[2]
return(result)
}
addFirstTwo(c(1, "z"))
addFirstTwo(c(1, 4, 6))
addFirstTwo <- function(x){
result <- x[1] + x[2]
return(result)
print(class(x[1], x[2])
}
addFirstTwo <- function(x){
result <- x[1] + x[2]
return(result)
print(class())
}
addFirstTwo(c(1, 4, 6))
addFirstTwo <- function(x){
result <- x[1] + x[2]
return(result)
print(class(x))
}
addFirstTwo(c(1, 4, 6))
addFirstTwo <- function(x){
result <- x[1] + x[2]
return(result)
browser()
}
addFirstTwo(c(1, "Z")
addFirstTwo(c(1, "Z")
mean(1:10, trim = NA)
addFirstTwo <- function(x){
result <- x[1] + x[2]
print(class(x))
}
addFirstTwo(c(1, 4, 6))
addFirstTwo <- function(x){
result <- x[1] + x[2]
print(class(x[1], x[2]))
}
addFirstTwo(c(1, 4, 6))
addFirstTwo <- function(x){
result <- x[1] + x[2]
print(class(x[1])
print(class(x[2])
}
addFirstTwo <- function(x){
result <- x[1] + x[2]
print(class(x)
}
addFirstTwo <- function(x){
result <- x[1] + x[2]
print(class(x))
}
addFirstTwo(c(1, "Z", 6))
addFirstTwo(c(1, 2, 6))
addFirstTwo(c("Z", 2, 6))
addFirstTwo <- function(x){
result <- x[1] + x[2]
browser(x)
}
addFirstTwo(c(1, "Z")
addFirstTwo(c(1, "Z")
addFirstTwo <- function(x){
result <- mean(1:10, trim = NA)
browser(result)
}
addFirstTwo <- function(x){
result <- mean(1:10, trim = NA)
traceback(x)
}
newfunction <- function(x){
result <- mean(1:10, trim = NA)
traceback(x)
}
newfunction(c(1, 2)
newfunction(c(1, 2)
addFirstTwo <- function(x){
result <- x[1] + x[2]
browser()
}
addFirstTwo(c(1, "Z")
addFirstTwo(c(1, "Z"))
addFirstTwo(c(1, "Z"))
addFirstTwo <- function(x){
browser()
result <- x[1] + x[2]
}
addFirstTwo(c(1, "Z"))
result <- x[1] + x[2]
addFirstTwo(c(1, 2))
result <- x[1] + x[2]
addFirstTwo <- function(x){
result <- x[1] + x[2]
}
addFirstTwo(c(1, 2))
addFirstTwo(c(1, "Z"))
traceback()
RFMfunction("trans",60,20,20)
RFMfunction <- function(data, weight_recency=1, weight_frequency=1, weight_monetary=1){
# adjusting values to ensure that the weights add up to one
weight_recency2 <- weight_recency/sum(weight_recency, weight_frequency, weight_monetary)
weight_frequency2 <- weight_frequency/sum(weight_recency, weight_frequency, weight_monetary)
weight_monetary2 <- weight_monetary/sum(weight_recency, weight_frequency, weight_monetary)
print("weights are calculated")
# RFM measures
max.Date <- max(data[,TransDate])
temp <- data[,list(
recency = as.numeric(max.Date - max(TransDate)),
frequency = .N,
monetary = mean(PurchAmount)),
by=Customer
]
print("RFM Measure done")
# RFM scores
temp <- temp[,list(Customer,
recency = as.numeric(cut2(-recency, g=3)),
frequency = as.numeric(cut2(frequency, g=3)),
monetary = as.numeric(cut2(monetary, g=3)))]
# Overall RFM score
temp[,finalscore:=weight_recency2*recency+weight_frequency2*frequency+weight_monetary2*monetary]
print("Overall RFM Measure done")
# RFM group
temp[,group:=round(finalscore)]
# Return final table
return(temp)
}
RFMfunction("trans",60,20,20)
traceback()
newfunction <- function(){
result <- mean(1:10, trim = NA)
}
function()
newfunction()
newfunction <- function(){
result <- mean(1:10, trim = NA)
return(result)
}
newfunction()
traceback()
addFirstTwo <- function(x){
result <- x[1] + x[2]
}
addFirstTwo(c(1, "Z"))
traceback()
addFirstTwo <- function(x){
browser()
result <- x[1] + x[2]
}
addFirstTwo(c(1, "Z"))
result <- x[1] + x[2]
install.packages("usethis")
library(library)
library(usethis)
usethis::use_testthat()
setwd("~/")
library(testthat)
addFirstTwo <- function(vec){
browser()
result <- vec[1] + vec[2]
return(result)
}
addFirstTwo(c(1, "Z"))
result <- vec[1] + vec[2]
context("Correct Output")
test_that("adds the first two elements of a vector", {
expect_equal(addFirstTwo(4,5,6), 9)
expect_equal(addFirstTwo(1,2,6), 3)
expect_equal(addFirstTwo(4,5,6), 9)
})
context("Correct Output")
test_that("adds the first two elements of a vector", {
expect_equal(addFirstTwo(4,5,6), 9)
expect_equal(addFirstTwo(1,2,6), 3)
expect_equal(addFirstTwo(3,3), 6)
})
context("Correct Output")
test_that("adds the first two elements of a vector", {
expect_equal(addFirstTwo(C(4,5,6), 9)
expect_equal(addFirstTwo(c(1,2,6), 3)
expect_equal(addFirstTwo(c(3,3), 6)
})
context("Correct Output")
test_that("adds the first two elements of a vector", {
expect_equal(addFirstTwo(C(4,5,6), 9))
expect_equal(addFirstTwo(c(1,2,6), 3))
expect_equal(addFirstTwo(c(3,3), 6))
})
context("Correct Output")
test_that("adds the first two elements of a vector", {
expect_equal(addFirstTwo(C(4,5,6), 9))
expect_equal(addFirstTwo(c(1,2,6), 3))
expect_equal(addFirstTwo(c(3,3), 6))
})
expect_equal(addFirstTwo(C(4,5,6), 9))
expect_equal(addFirstTwo(c(1,2,6), 3))
expect_equal(addFirstTwo(c(3,3), 6))
library(testthat)
expect_equal(addFirstTwo(C(4,5,6), 9))
expect_equal(addFirstTwo(c(4,5,6), 9))
context("Correct Output")
test_that("adds the first two elements of a vector", {
expect_equal(addFirstTwo(c(4,5,6)), 9)
expect_equal(addFirstTwo(c(1,2,6)), 3)
expect_equal(addFirstTwo(c(3,3)), 6)
})
#always at the end of the code
traceback()
install.packages("devtools")
library(devtools)
library(myRFMpackage)
myRFMpackage(transactions,20,20,60)
calculateRFM(transactions,20,20,60)
addFirstTwo(1,2)
addFirstTwo(c(1,2))
result <- vec[1] + vec[2]
return(result)
function(vec){
browser()
result <- vec[1] + vec[2]
return(result)
}
library(myRFMpackage)
addFirstTwo(c(1,2,3))
addFirstTwo <- function(x){
result <- x[1] + x[2]
return(result)
}
library(myRFMpackage)
addFirstTwo(c(1,4))
addFirstTwo(c(1,4,4))
